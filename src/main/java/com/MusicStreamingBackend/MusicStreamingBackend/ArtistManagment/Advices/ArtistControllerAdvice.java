package com.MusicStreamingBackend.MusicStreamingBackend.ArtistManagment.Advices;

import com.MusicStreamingBackend.MusicStreamingBackend.ArtistManagment.Exceptions.ArtistNotFoundException;
import com.MusicStreamingBackend.MusicStreamingBackend.ArtistManagment.Exceptions.ArtistNotSavedException;
import com.MusicStreamingBackend.MusicStreamingBackend.ArtistManagment.Exceptions.ArtistNotUpdatedException;
import com.MusicStreamingBackend.MusicStreamingBackend.ArtistManagment.Exceptions.ArtistNotDeletedException;
import com.MusicStreamingBackend.MusicStreamingBackend.utility.ApiErrorResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
@Slf4j
public class ArtistControllerAdvice {

    @ExceptionHandler(ArtistNotFoundException.class)
    public ResponseEntity<ApiErrorResponse> handleArtistNotFoundException(ArtistNotFoundException exception) {
        log.error("Artist not found: {}", exception.getMessage());
        ApiErrorResponse response = new ApiErrorResponse(
                HttpStatus.NOT_FOUND,
                exception.getMessage(),
                null // Timestamp will be auto-generated by the constructor
        );
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(ArtistNotSavedException.class)
    public ResponseEntity<ApiErrorResponse> handleArtistNotSavedException(ArtistNotSavedException exception) {
        log.error("Artist could not be saved: {}", exception.getMessage());
        ApiErrorResponse response = new ApiErrorResponse(
                HttpStatus.INTERNAL_SERVER_ERROR,
                exception.getMessage(),
                null
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(ArtistNotUpdatedException.class)
    public ResponseEntity<ApiErrorResponse> handleArtistNotUpdatedException(ArtistNotUpdatedException exception) {
        log.error("Artist could not be updated: {}", exception.getMessage());
        ApiErrorResponse response = new ApiErrorResponse(
                HttpStatus.INTERNAL_SERVER_ERROR,
                exception.getMessage(),
                null
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(ArtistNotDeletedException.class)
    public ResponseEntity<ApiErrorResponse> handleArtistNotDeletedException(ArtistNotDeletedException exception) {
        log.error("Artist could not be deleted: {}", exception.getMessage());
        ApiErrorResponse response = new ApiErrorResponse(
                HttpStatus.INTERNAL_SERVER_ERROR,
                exception.getMessage(),
                null
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiErrorResponse> handleGeneralException(Exception exception) {
        log.error("An unexpected error occurred: {}", exception.getMessage());
        ApiErrorResponse response = new ApiErrorResponse(
                HttpStatus.INTERNAL_SERVER_ERROR,
                "An unexpected error occurred",
                null
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
